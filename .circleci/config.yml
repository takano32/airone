version: 2
jobs:
  python36:
    docker:
      - image: circleci/python:3.6
      - image: rabbitmq:3.7
      - image: memcached:1.5
      - image: docker.elastic.co/elasticsearch/elasticsearch:6.2.3
        environment:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
          AIRONE_BACKEND_DB: sqlite3
      - image: mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_DATABASE: airone
        command: [--character-set-server=utf8, --collation-server=utf8_general_ci, --default-storage-engine=innodb]
    environment:
      TOXENV: "py36"
    steps:
      - checkout
      - run:
          name: Wait for ElasticSearch
          command: dockerize -wait tcp://127.0.0.1:9200 -timeout 120s
      - restore_cache:
          key: py36-{{ checksum "requirements.txt" }}-{{ checksum "tox.ini" }}
      - run:
          name: Install tox coverage
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install tox coverage
      - run:
          name: Testing
          command: |
            . venv/bin/activate
            tox
      - save_cache:
          key: py36-{{ checksum "requirements.txt" }}-{{ checksum "tox.ini" }}
          paths:
            - venv
            - .tox/py36

  python35:
    docker:
      - image: circleci/python:3.5
      - image: rabbitmq:3.7
      - image: memcached:1.5
      - image: docker.elastic.co/elasticsearch/elasticsearch:6.2.3
        environment:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
          AIRONE_BACKEND_DB: sqlite3
      - image: mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_DATABASE: airone
        command: [--character-set-server=utf8, --collation-server=utf8_general_ci, --default-storage-engine=innodb]
    environment:
      TOXENV: "py35"
    steps:
      - checkout
      - run:
          name: Wait for ElasticSearch
          command: dockerize -wait tcp://127.0.0.1:9200 -timeout 120s
      - restore_cache:
          key: py35-{{ checksum "requirements.txt" }}-{{ checksum "tox.ini" }}
      - run:
          name: Install tox tox-pyenv coverage
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install tox coverage
      - run:
          name: Testing
          command: |
            . venv/bin/activate
            tox
      - save_cache:
          key: py35-{{ checksum "requirements.txt" }}-{{ checksum "tox.ini" }}
          paths:
            - venv
            - .tox/py35
      - run:
          name: Coverage
          command: |
            . venv/bin/activate
            ./coverage.sh

  flake8_py36:
    docker:
      - image: circleci/python:3.6
    environment:
      TOXENV: "flake8"
    steps:
      - checkout
      - run:
          name: Install tox tox-pyenv
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install tox
      - run:
          name: flake8
          command: |
            . venv/bin/activate
            tox

  flake8_py35:
    docker:
      - image: circleci/python:3.5
    environment:
      TOXENV: "flake8"
    steps:
      - checkout
      - run:
          name: Install tox tox-pyenv
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install tox
      - run:
          name: flake8
          command: |
            . venv/bin/activate
            tox

workflows:
  version: 2
  build_and_test:
    jobs:
      - python36
      - python35
      - flake8_py36
      - flake8_py35
